[{"/Users/elliottyoon/Desktop/webdev-labs/lab10/src/index.js":"1","/Users/elliottyoon/Desktop/webdev-labs/lab10/src/App.js":"2","/Users/elliottyoon/Desktop/webdev-labs/lab10/src/utils.js":"3","/Users/elliottyoon/Desktop/webdev-labs/lab10/src/Posts.js":"4","/Users/elliottyoon/Desktop/webdev-labs/lab10/src/Stories.js":"5","/Users/elliottyoon/Desktop/webdev-labs/lab10/src/Suggestions.js":"6","/Users/elliottyoon/Desktop/webdev-labs/lab10/src/Profile.js":"7","/Users/elliottyoon/Desktop/webdev-labs/lab10/src/NavBar.js":"8","/Users/elliottyoon/Desktop/webdev-labs/lab10/src/Post.js":"9","/Users/elliottyoon/Desktop/webdev-labs/lab10/src/LikeButton.js":"10","/Users/elliottyoon/Desktop/webdev-labs/lab10/src/BookmarkButton.js":"11","/Users/elliottyoon/Desktop/webdev-labs/lab10/src/Suggestion.js":"12","/Users/elliottyoon/Desktop/webdev-labs/lab10/src/AddComment.js":"13"},{"size":1469,"mtime":1653917266000,"results":"14","hashOfConfig":"15"},{"size":1267,"mtime":1654815461384,"results":"16","hashOfConfig":"15"},{"size":2106,"mtime":1653917516000,"results":"17","hashOfConfig":"15"},{"size":1116,"mtime":1654273223541,"results":"18","hashOfConfig":"15"},{"size":1318,"mtime":1654812148224,"results":"19","hashOfConfig":"15"},{"size":1526,"mtime":1654806293520,"results":"20","hashOfConfig":"15"},{"size":592,"mtime":1654815493923,"results":"21","hashOfConfig":"15"},{"size":637,"mtime":1654808362628,"results":"22","hashOfConfig":"15"},{"size":3724,"mtime":1654815685236,"results":"23","hashOfConfig":"15"},{"size":2000,"mtime":1654815641952,"results":"24","hashOfConfig":"15"},{"size":2107,"mtime":1654815390146,"results":"25","hashOfConfig":"15"},{"size":1756,"mtime":1654815524441,"results":"26","hashOfConfig":"15"},{"size":1757,"mtime":1654815436897,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17ge7pb",{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"34"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"/Users/elliottyoon/Desktop/webdev-labs/lab10/src/index.js",[],[],"/Users/elliottyoon/Desktop/webdev-labs/lab10/src/App.js",[],[],[],"/Users/elliottyoon/Desktop/webdev-labs/lab10/src/utils.js",[],[],"/Users/elliottyoon/Desktop/webdev-labs/lab10/src/Posts.js",[],[],[],"/Users/elliottyoon/Desktop/webdev-labs/lab10/src/Stories.js",[],[],"/Users/elliottyoon/Desktop/webdev-labs/lab10/src/Suggestions.js",[],[],"/Users/elliottyoon/Desktop/webdev-labs/lab10/src/Profile.js",[],[],"/Users/elliottyoon/Desktop/webdev-labs/lab10/src/NavBar.js",[],[],"/Users/elliottyoon/Desktop/webdev-labs/lab10/src/Post.js",[],[],"/Users/elliottyoon/Desktop/webdev-labs/lab10/src/LikeButton.js",["72"],[],"import React from 'react'\nimport {getHeaders} from './utils'\n\nclass LikeButton extends React.Component {\n    \n    constructor(props) {\n        super(props);\n\n        // binding \"this\"\n        this.toggleLike = this.toggleLike.bind(this);\n        this.createLike = this.createLike.bind(this);\n        this.removeLike = this.removeLike.bind(this)\n\n    }\n\n    componentDidMount() {\n        // fetch posts and then set the state\n    }\n\n    toggleLike () {\n        if (this.props.likeId) {\n            this.removeLike();\n        } else {\n            this.createLike();\n        }\n\n    }\n\n    createLike () {\n        // fetch POST: /api/post/likes\n        const url = '/api/posts/likes';\n        const postData = {post_id: this.props.postId}\n        console.log('create like: ', url);\n        fetch(url, {\n            headers: getHeaders(),\n            method: 'POST',\n            body: JSON.stringify(postData)\n        }).then(response => response.json())\n        .then(data => {\n            // this needs to trigger a post redraw\n            this.props.refreshPost();\n\n            console.log(data);\n        })\n    }\n\n    removeLike () {\n        // fetch DELETE: /api/post/likes/{likeId}\n        const url = '/api/posts/likes/' + this.props.likeId;\n        console.log('remove like: ', url);\n        fetch(url, {\n            headers: getHeaders(),\n            method: 'DELETE'\n        }).then(response => response.json())\n        .then(data=> {\n            // this needs to trigger a posts redraw\n            this.props.refreshPost();\n\n            console.log(data)\n\n        })\n    }\n\n    render() {\n        const likeId = this.props.likeId\n        let heartClass = likeId ? 'fas' : 'far';\n        return (\n            <button \n                onClick={this.toggleLike}\n                aria-label=\"Like / Unlike\"\n                aria-checked={likeId ? 'true' : 'false'}>\n                <i className={heartClass + ' fa-heart fa-lg'}></i>\n            </button>\n        )\n    }\n}\n\nexport default LikeButton;","/Users/elliottyoon/Desktop/webdev-labs/lab10/src/BookmarkButton.js",["73"],[],"import React from 'react'\nimport {getHeaders} from './utils'\n\nclass BookmarkButton extends React.Component {\n    \n    constructor(props) {\n        super(props);\n\n        // binding \"this\"\n        this.toggleBookmark = this.toggleBookmark.bind(this);\n        this.createBookmark = this.createBookmark.bind(this);\n        this.removeBookmark = this.removeBookmark.bind(this)\n\n    }\n\n    componentDidMount() {\n        // fetch posts and then set the state\n    }\n\n    toggleBookmark () {\n        if (this.props.bookmarkId) {\n            this.removeBookmark();\n        } else {\n            this.createBookmark();\n        }\n\n    }\n\n    createBookmark () {\n        // fetch POST: /api/post/likes\n        const url = '/api/bookmarks';\n        const postData = {post_id: this.props.postId}\n        console.log('create bookmark: ', url);\n        fetch(url, {\n            headers: getHeaders(),\n            method: 'POST',\n            body: JSON.stringify(postData)\n        }).then(response => response.json())\n        .then(data => {\n            // this needs to trigger a post redraw\n            this.props.refreshPost();\n\n            console.log(data);\n        })\n    }\n\n    removeBookmark () {\n        // fetch DELETE: /api/post/bookmarks/{likeId}\n        const url = '/api/bookmarks/' + this.props.bookmarkId;\n        console.log('remove bookmark: ', url);\n        fetch(url, {\n            headers: getHeaders(),\n            method: 'DELETE'\n        }).then(response => response.json())\n        .then(data=> {\n            // this needs to trigger a posts redraw\n            this.props.refreshPost();\n\n            console.log(data)\n\n        })\n    }\n\n    render() {\n        const bookmarkId = this.props.bookmarkId\n        let bookmarkClass = (bookmarkId ? 'fas' : 'far') + ' fa-bookmark fa-lg';\n        return (\n            <button \n                onClick={this.toggleBookmark}\n                aria-label=\"Bookmark / Unbookmark\"\n                aria-checked={bookmarkId ? 'true' : 'false'}>\n                <i className={bookmarkClass}></i>\n            </button>\n        )\n    }\n}\n\nexport default BookmarkButton;","/Users/elliottyoon/Desktop/webdev-labs/lab10/src/Suggestion.js",["74"],[],"import React from 'react'\nimport {getHeaders} from './utils'\n\nclass Suggestion extends React.Component {\n    \n    constructor(props) {\n        super(props);\n        // initialization code goes here\n        this.state = {\n            suggestion: props.model\n        }\n\n        this.toggleFollow = this.toggleFollow.bind(this)\n\n        \n    }\n\n    componentDidMount() {\n        // fetch posts and then set the state\n    }\n\n    toggleFollow () {\n        const url = \"/api/following\"\n        const postData = { user_id: this.props.model.id }\n        console.log('following: ', url)\n        fetch(url, {\n            method: 'POST',\n            headers: getHeaders(),\n            body: JSON.stringify(postData)\n        }).then(response => response.json())\n        .then(data => {\n            this.props.refreshSuggestions();\n        })\n    }\n\n    render() {\n        const suggestion = this.state.suggestion;\n        return (\n            <section \n                className=\"recommendation-card\"\n                key={'suggestion_' + suggestion.id}>\n                <img className=\"rounded\" src={suggestion.thumb_url} alt=\"\"/>\n                <div className=\"recommended-username\">\n                    <p className=\"username\">{suggestion.username}</p>\n                    <p className=\"suggested-for-you\">suggested for you</p>\n                </div>\n                <div>\n                    <button \n                        className=\"link\"\n                        aria-label=\"Follow\"\n                        aria-checked=\"false\"\n                        data-user-id={suggestion.id}\n                        onClick={this.toggleFollow}\n                    >follow</button>\n                </div>\n            </section>\n        )\n    }\n}\n\nexport default Suggestion;","/Users/elliottyoon/Desktop/webdev-labs/lab10/src/AddComment.js",[],[],{"ruleId":"75","severity":1,"message":"76","line":68,"column":13,"nodeType":"77","endLine":71,"endColumn":58},{"ruleId":"75","severity":1,"message":"76","line":68,"column":13,"nodeType":"77","endLine":71,"endColumn":62},{"ruleId":"75","severity":1,"message":"76","line":48,"column":21,"nodeType":"77","endLine":54,"endColumn":22},"jsx-a11y/role-supports-aria-props","The attribute aria-checked is not supported by the role button. This role is implicit on the element button.","JSXOpeningElement"]