{"ast":null,"code":"var _jsxFileName = \"/Users/elliottyoon/Desktop/webdev-labs/lab10/src/BookmarkButton.js\";\nimport React from 'react';\nimport { getHeaders } from './utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BookmarkButton extends React.Component {\n  constructor(props) {\n    super(props); // binding \"this\"\n\n    this.toggleLike = this.toggleLike.bind(this);\n    this.createLike = this.createLike.bind(this);\n    this.removeLike = this.removeLike.bind(this);\n  }\n\n  componentDidMount() {// fetch posts and then set the state\n  }\n\n  toggleBookmark() {\n    if (this.props.bookmarkId) {\n      this.removeBookmark();\n    } else {\n      this.createBookmark();\n    }\n  }\n\n  createBookmark() {\n    // fetch POST: /api/post/likes\n    const url = '/api/posts/bookmarks';\n    const postData = {\n      post_id: this.props.postId\n    };\n    console.log('create bookmark: ', url);\n    fetch(url, {\n      headers: getHeaders(),\n      method: 'POST',\n      body: JSON.stringify(postData)\n    }).then(response => response.json()).then(data => {\n      // this needs to trigger a post redraw\n      this.props.refreshPost();\n      console.log(data);\n    });\n  }\n\n  removeBookmark() {\n    // fetch DELETE: /api/post/bookmarks/{likeId}\n    const url = '/api/posts/bookmarks/' + this.props.bookmarkId;\n    console.log('remove bookmark: ', url);\n    fetch(url, {\n      headers: getHeaders(),\n      method: 'DELETE'\n    }).then(response => response.json()).then(data => {\n      // this needs to trigger a posts redraw\n      this.props.refreshPost();\n      console.log(data);\n    });\n  }\n\n  render() {\n    const bookmarkId = this.props.bookmarkId;\n    let iconClass = bookmarkId ? 'fas' : 'fa';\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: this.toggleBookmark,\n      \"aria-label\": \"Bookmark / Unbookmark\",\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        className: iconClass + ' fa-bookmark'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default BookmarkButton;","map":{"version":3,"sources":["/Users/elliottyoon/Desktop/webdev-labs/lab10/src/BookmarkButton.js"],"names":["React","getHeaders","BookmarkButton","Component","constructor","props","toggleLike","bind","createLike","removeLike","componentDidMount","toggleBookmark","bookmarkId","removeBookmark","createBookmark","url","postData","post_id","postId","console","log","fetch","headers","method","body","JSON","stringify","then","response","json","data","refreshPost","render","iconClass"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,UAAR,QAAyB,SAAzB;;;AAEA,MAAMC,cAAN,SAA6BF,KAAK,CAACG,SAAnC,CAA6C;AAEzCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN,EADe,CAGf;;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBD,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKE,UAAL,GAAkB,KAAKA,UAAL,CAAgBF,IAAhB,CAAqB,IAArB,CAAlB;AAEH;;AAEDG,EAAAA,iBAAiB,GAAG,CAChB;AACH;;AAEDC,EAAAA,cAAc,GAAI;AACd,QAAI,KAAKN,KAAL,CAAWO,UAAf,EAA2B;AACvB,WAAKC,cAAL;AACH,KAFD,MAEO;AACH,WAAKC,cAAL;AACH;AAEJ;;AAEDA,EAAAA,cAAc,GAAI;AACd;AACA,UAAMC,GAAG,GAAG,sBAAZ;AACA,UAAMC,QAAQ,GAAG;AAACC,MAAAA,OAAO,EAAE,KAAKZ,KAAL,CAAWa;AAArB,KAAjB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCL,GAAjC;AACAM,IAAAA,KAAK,CAACN,GAAD,EAAM;AACPO,MAAAA,OAAO,EAAErB,UAAU,EADZ;AAEPsB,MAAAA,MAAM,EAAE,MAFD;AAGPC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeV,QAAf;AAHC,KAAN,CAAL,CAIGW,IAJH,CAIQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAJpB,EAKCF,IALD,CAKMG,IAAI,IAAI;AACV;AACA,WAAKzB,KAAL,CAAW0B,WAAX;AAEAZ,MAAAA,OAAO,CAACC,GAAR,CAAYU,IAAZ;AACH,KAVD;AAWH;;AAEDjB,EAAAA,cAAc,GAAI;AACd;AACA,UAAME,GAAG,GAAG,0BAA0B,KAAKV,KAAL,CAAWO,UAAjD;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCL,GAAjC;AACAM,IAAAA,KAAK,CAACN,GAAD,EAAM;AACPO,MAAAA,OAAO,EAAErB,UAAU,EADZ;AAEPsB,MAAAA,MAAM,EAAE;AAFD,KAAN,CAAL,CAGGI,IAHH,CAGQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHpB,EAICF,IAJD,CAIMG,IAAI,IAAG;AACT;AACA,WAAKzB,KAAL,CAAW0B,WAAX;AAEAZ,MAAAA,OAAO,CAACC,GAAR,CAAYU,IAAZ;AAEH,KAVD;AAWH;;AAEDE,EAAAA,MAAM,GAAG;AACL,UAAMpB,UAAU,GAAG,KAAKP,KAAL,CAAWO,UAA9B;AACA,QAAIqB,SAAS,GAAGrB,UAAU,GAAG,KAAH,GAAW,IAArC;AACA,wBACI;AACI,MAAA,OAAO,EAAE,KAAKD,cADlB;AAEI,oBAAW,uBAFf;AAAA,6BAGI;AAAG,QAAA,SAAS,EAAEsB,SAAS,GAAG;AAA1B;AAAA;AAAA;AAAA;AAAA;AAHJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH;;AAtEwC;;AAyE7C,eAAe/B,cAAf","sourcesContent":["import React from 'react'\nimport {getHeaders} from './utils'\n\nclass BookmarkButton extends React.Component {\n    \n    constructor(props) {\n        super(props);\n\n        // binding \"this\"\n        this.toggleLike = this.toggleLike.bind(this);\n        this.createLike = this.createLike.bind(this);\n        this.removeLike = this.removeLike.bind(this)\n\n    }\n\n    componentDidMount() {\n        // fetch posts and then set the state\n    }\n\n    toggleBookmark () {\n        if (this.props.bookmarkId) {\n            this.removeBookmark();\n        } else {\n            this.createBookmark();\n        }\n\n    }\n\n    createBookmark () {\n        // fetch POST: /api/post/likes\n        const url = '/api/posts/bookmarks';\n        const postData = {post_id: this.props.postId}\n        console.log('create bookmark: ', url);\n        fetch(url, {\n            headers: getHeaders(),\n            method: 'POST',\n            body: JSON.stringify(postData)\n        }).then(response => response.json())\n        .then(data => {\n            // this needs to trigger a post redraw\n            this.props.refreshPost();\n\n            console.log(data);\n        })\n    }\n\n    removeBookmark () {\n        // fetch DELETE: /api/post/bookmarks/{likeId}\n        const url = '/api/posts/bookmarks/' + this.props.bookmarkId;\n        console.log('remove bookmark: ', url);\n        fetch(url, {\n            headers: getHeaders(),\n            method: 'DELETE'\n        }).then(response => response.json())\n        .then(data=> {\n            // this needs to trigger a posts redraw\n            this.props.refreshPost();\n\n            console.log(data)\n\n        })\n    }\n\n    render() {\n        const bookmarkId = this.props.bookmarkId\n        let iconClass = bookmarkId ? 'fas' : 'fa';\n        return (\n            <button \n                onClick={this.toggleBookmark}\n                aria-label=\"Bookmark / Unbookmark\">\n                <i className={iconClass + ' fa-bookmark'}></i>\n            </button>\n        )\n    }\n}\n\nexport default BookmarkButton;"]},"metadata":{},"sourceType":"module"}